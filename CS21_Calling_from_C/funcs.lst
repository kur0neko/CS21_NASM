     1                                  
     2                                  	global 		addTwo			;work!
     3                                  	global 		addArray       	;Work!
     4                                  	global		pow2			;#work
     5                                  	global		addTwoArray		
     6                                  	global		revArray
     7                                  	global		multiplyTwo		;#
     8                                  	
     9                                  	
    10                                  ;#####################################################################################
    11                                  
    12                                  addTwo:
    13 00000000 90                      	nop
    14                                  	
    15 00000001 8B442404                	mov	eax,[esp+4]			;Copy first paremeter to eax
    16 00000005 8B542408                	mov	edx,[esp+8]			;Copy second parameter to edx
    17 00000009 01D0                    	add	eax,edx				;Add first and second parameters
    18                                  	
    19 0000000B C3                      	ret						;Return will, by default, be in the eax register
    20                                  	
    21                                  ;######################################################################################
    22                                  
    23                                  addArray: 
    24 0000000C 90                      	nop
    25 0000000D 8B742404                	mov		esi,[esp+4]		;Copy first parameter to esi: Pointer to array
    26 00000011 8B4C2408                	mov		ecx,[esp+8]		;Copy second paraneter to ecx: number of items in the array
    27 00000015 BF00000000                  mov 	edi,0			;set counter   
    28 0000001A B800000000                  mov 	eax,0			;Set total to zero
    29                                      
    30                                      Loop1:
    31 0000001F 8B143E                  		mov edx,[esi+edi]	;Copy Value at array address+counter to edx
    32 00000022 01D0                    		add eax, edx		;Add the array value in edx to eax
    33 00000024 83C704                  		add edi, 4          ;Increment ebx by a double word size (4 bytes)		
    34 00000027 E2F6                    	Loop  Loop1				;ecx contains the counter -decrement it and loop
    35 00000029 C3                      	ret                     ;Return will, by defaultm, be in the eax register
    36                                  	
    37                                  ;######################################################################################
    38                                  
    39                                  pow2:
    40 0000002A 90                      	nop						
    41 0000002B 8B442404                	mov	eax,[esp+4]			;Copy first parameter to esi
    42 0000002F F7E0                    	mul	eax					;Mul eax, eax
    43                                  	
    44 00000031 C3                      	ret						;return
    45                                  	
    46                                  ;######################################################################################
    47                                  
    48                                  multiplyTwo:
    49 00000032 90                      	nop           
    50 00000033 8B442404                	mov eax,[esp+4]			;Copy first number into eax and push it in the stack
    51 00000037 8B542408                	mov edx,[esp+8]			;Copy second number into eax and push it in the stack
    52 0000003B F7E2                    	mul	edx					;Multiply with eax,edx
    53                                  	
    54 0000003D C3                      	ret						
    55                                  ;######################################################################################
    56                                  
    57                                  revArray:
    58                                      
    59                                      
    60 0000003E 8B742404                    mov		esi,[esp+4] 			; hold address of array1
    61                                      
    62 00000042 8B542408                    mov		edx,[esp+8] 			; hold address of empty array2  //hold the address
    63                                       
    64 00000046 8B4C240C                    mov		ecx,[esp+12]			; Array size
    65                                      
    66 0000004A BF00000000                  mov		edi,0          			; clear register edi
    67                                  		
    68 0000004F B800000000                  mov		eax,0					; counter
    69                                      
    70                                      ReverseArrLoop:
    71                                      
    72 00000054 8B3C06                      mov edi,[esi+eax]				; move the first element of Array[0] put in edi
    73                                      
    74 00000057 897C8AFC                    mov [edx+(ecx-1)*4],edi         ; move the array first element from edi put in array2[last element]
    75                                      
    76 0000005B 83C004                  	add eax,4	                    ;increament the counter
    77                                  	
    78 0000005E E2F4                    	loop ReverseArrLoop
    79                                  	
    80 00000060 C3                      	ret								
    81                                     
    82                                      
    83                                  		
    84                                  ;######################################################################################
    85                                  
    86                                  addTwoArray:
    87                                  
    88                                  	;there are four arguments array1,array2,array3,size
    89 00000061 53                      	push 	ebx
    90 00000062 8B742404                	mov		esi, 	[esp+4]				;2 array1
    91 00000066 8B5C2408                	mov		ebx,	[esp+8]             ;3 array2
    92 0000006A 8B54240C                	mov		edx,	[esp+12]			;4 array3
    93 0000006E 8B4C2410                	mov		ecx,    [esp+16]			;5 size
    94 00000072 BF00000000              	mov		edi,	0					;counter
    95 00000077 B800000000              	mov		eax,	0					;scracth memory	
    96                                  	
    97                                  	AddtwoArrLoop:
    98 0000007C 8B04BE                  	mov		eax,[esi+edi*4]				;move array1[counter] to empty register edi
    99 0000007F 0304BB                  	add		eax,[ebx+edi*4]				;add array2[counter] with edi
   100 00000082 8904BA                  	mov		[edx+edi*4],eax				;mov result data to array3[index]
   101 00000085 47                      	inc		edi						;increment counter
   102 00000086 E2F4                    	loop AddtwoArrLoop
   103 00000088 5B                      	pop		ebx
   104                                  	
   105 00000089 C3                      	ret
   106                                  	
   107                                  ;######################################################################################
   108                                  	
   109                                  	
   110                                  	
   111                                   
   112                                  
   113                                  	
   114                                  
   115                                  	
   116                                  
   117                                  
